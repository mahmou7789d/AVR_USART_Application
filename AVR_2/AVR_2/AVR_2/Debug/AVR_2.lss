
AVR_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b58  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800060  00800060  00000bcc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b8  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001735  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000717  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000804  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004b0  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b65  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e77  00000000  00000000  00004419  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_1>
   8:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_2>
   c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_13>
  38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_14>
  3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_15>
  40:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 37       	cpi	r26, 0x7A	; 122
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP2_Init>:
#include <util/delay.h>


void APP2_Init()
{
	USART0.Micro_State=USART_Receiver;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 68 00 	sts	0x0068, r24
	USART0.Communcation_Mode=USART_Asyn_Normal;
  82:	10 92 69 00 	sts	0x0069, r1
	USART0.Communication_Processor=USART_SingleProcessor;
  86:	10 92 6a 00 	sts	0x006A, r1
	USART0.Baud_Rate=9600;
  8a:	80 e8       	ldi	r24, 0x80	; 128
  8c:	95 e2       	ldi	r25, 0x25	; 37
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	80 93 6f 00 	sts	0x006F, r24
  96:	90 93 70 00 	sts	0x0070, r25
  9a:	a0 93 71 00 	sts	0x0071, r26
  9e:	b0 93 72 00 	sts	0x0072, r27
	USART0.Interrupt_Source=USART_Interrupt_Disable;
  a2:	10 92 6b 00 	sts	0x006B, r1
	USART0.Character_Size=Size_8bit;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	80 93 6c 00 	sts	0x006C, r24
	USART0.Frame_Control=USART_Parity_Disable_1StopBit;
  ac:	10 92 6d 00 	sts	0x006D, r1
	USART_Init();
  b0:	0e 94 99 02 	call	0x532	; 0x532 <USART_Init>
	LCD_Init();
  b4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Init>
  b8:	08 95       	ret

000000ba <APP2_System>:
void APP2_System()
{
	uint_8 R_data;
	while(1)
	{
		R_data =USART_Receive_ByteOfData_Blocking();
  ba:	0e 94 90 03 	call	0x720	; 0x720 <USART_Receive_ByteOfData_Blocking>
		Send_char_LCD(R_data);
  be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Send_char_LCD>
  c2:	fb cf       	rjmp	.-10     	; 0xba <APP2_System>

000000c4 <main>:

#include <APP_2.h>

int main(void)
{
	APP2_Init();
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <APP2_Init>
	APP2_System();
  c8:	0e 94 5d 00 	call	0xba	; 0xba <APP2_System>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x8>

000000ce <Set_Enable_Bit>:

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	86 e3       	ldi	r24, 0x36	; 54
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <Set_Enable_Bit+0x10>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <Set_Enable_Bit+0x16>
  e4:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	86 e3       	ldi	r24, 0x36	; 54
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Set_Enable_Bit+0x28>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Set_Enable_Bit+0x2e>
  fc:	00 00       	nop
  fe:	08 95       	ret

00000100 <Send_Command_LCD>:
	_delay_ms(10);
	#endif
	#endif
}
void Send_Command_LCD(uint_8 Command)
{
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 104:	68 2f       	mov	r22, r24
 106:	82 e4       	ldi	r24, 0x42	; 66
 108:	0e 94 77 01 	call	0x2ee	; 0x2ee <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	86 e3       	ldi	r24, 0x36	; 54
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
	Set_Enable_Bit();
 118:	0e 94 67 00 	call	0xce	; 0xce <Set_Enable_Bit>
	GPIO_Write_High_Nibble('B',Command<<4);
 11c:	6c 2f       	mov	r22, r28
 11e:	62 95       	swap	r22
 120:	60 7f       	andi	r22, 0xF0	; 240
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	0e 94 77 01 	call	0x2ee	; 0x2ee <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	86 e3       	ldi	r24, 0x36	; 54
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
	Set_Enable_Bit();
 134:	0e 94 67 00 	call	0xce	; 0xce <Set_Enable_Bit>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <Send_Command_LCD+0x3c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <Send_Command_LCD+0x42>
 142:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#endif
	#endif
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <LCD_Init>:
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <LCD_Init+0x6>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Init+0x10>
 158:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);
	
	#elif  defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Port_Configuration(Port_B,0XF0);
 15a:	60 ef       	ldi	r22, 0xF0	; 240
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 74 01 	call	0x2e8	; 0x2e8 <GPIO_Port_Configuration>
	GPIO_Pin_Configuration(Port_B,RS_Pin,OUTPUT);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	86 e3       	ldi	r24, 0x36	; 54
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 14 01 	call	0x228	; 0x228 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,EN_Pin,OUTPUT);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	86 e3       	ldi	r24, 0x36	; 54
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 14 01 	call	0x228	; 0x228 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,RW_Pin,OUTPUT);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	86 e3       	ldi	r24, 0x36	; 54
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 14 01 	call	0x228	; 0x228 <GPIO_Pin_Configuration>
	CLEAR_BIT(LCD_CONTROL_BIT_PORT,RW_Pin);
 188:	a9 98       	cbi	0x15, 1	; 21
 18a:	8f ec       	ldi	r24, 0xCF	; 207
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Init+0x46>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Init+0x4c>
 194:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Return_Home);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 80 00 	call	0x100	; 0x100 <Send_Command_LCD>
 19c:	8f ec       	ldi	r24, 0xCF	; 207
 19e:	97 e0       	ldi	r25, 0x07	; 7
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x58>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x5e>
 1a6:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Function_Set_Four_BIT);
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 80 00 	call	0x100	; 0x100 <Send_Command_LCD>
 1ae:	8f ec       	ldi	r24, 0xCF	; 207
 1b0:	97 e0       	ldi	r25, 0x07	; 7
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Init+0x6a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_Init+0x70>
 1b8:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Display_On_Curser_On);
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	0e 94 80 00 	call	0x100	; 0x100 <Send_Command_LCD>
 1c0:	8f ec       	ldi	r24, 0xCF	; 207
 1c2:	97 e0       	ldi	r25, 0x07	; 7
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Init+0x7c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Init+0x82>
 1ca:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Clear_Display);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 80 00 	call	0x100	; 0x100 <Send_Command_LCD>
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Init+0x8e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Init+0x94>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <Send_char_LCD>:
	_delay_ms(1);
	#endif
	#endif
}
void Send_char_LCD(uint_8 Character)
{
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	GPIO_Port_Write(Port_B,Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
 1e4:	68 2f       	mov	r22, r24
 1e6:	82 e4       	ldi	r24, 0x42	; 66
 1e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	86 e3       	ldi	r24, 0x36	; 54
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
	Set_Enable_Bit();
 1f8:	0e 94 67 00 	call	0xce	; 0xce <Set_Enable_Bit>
	GPIO_Write_High_Nibble('B',Character<<4);
 1fc:	6c 2f       	mov	r22, r28
 1fe:	62 95       	swap	r22
 200:	60 7f       	andi	r22, 0xF0	; 240
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 77 01 	call	0x2ee	; 0x2ee <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GPIO_Pin_Write>
	Set_Enable_Bit();
 214:	0e 94 67 00 	call	0xce	; 0xce <Set_Enable_Bit>
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <Send_char_LCD+0x3c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <Send_char_LCD+0x42>
 222:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	_delay_ms(1);
	#endif
	#endif
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <GPIO_Pin_Configuration>:
		default:
		break;
	}
}
void GPIO_Pin_Configuration (GPIO_Register* Chip_port,GPIO_pin_number pin_num,GPIO_pin_Type  O_Or_I_Mode )
{
 228:	fc 01       	movw	r30, r24
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	21 f0       	breq	.+8      	; 0x236 <GPIO_Pin_Configuration+0xe>
 22e:	38 f1       	brcs	.+78     	; 0x27e <GPIO_Pin_Configuration+0x56>
 230:	42 30       	cpi	r20, 0x02	; 2
 232:	99 f0       	breq	.+38     	; 0x25a <GPIO_Pin_Configuration+0x32>
 234:	08 95       	ret
	 {
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 236:	21 81       	ldd	r18, Z+1	; 0x01
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <GPIO_Pin_Configuration+0x1c>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <GPIO_Pin_Configuration+0x18>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	86 2f       	mov	r24, r22
 24e:	82 23       	and	r24, r18
 250:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	68 23       	and	r22, r24
 256:	62 83       	std	Z+2, r22	; 0x02
		break;
 258:	08 95       	ret
		case INPUT_Pullup:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 25a:	21 81       	ldd	r18, Z+1	; 0x01
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <GPIO_Pin_Configuration+0x40>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <GPIO_Pin_Configuration+0x3c>
 26c:	ba 01       	movw	r22, r20
 26e:	84 2f       	mov	r24, r20
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	81 83       	std	Z+1, r24	; 0x01
		SET_BIT  (Chip_port->PORT,pin_num);
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	68 2b       	or	r22, r24
 27a:	62 83       	std	Z+2, r22	; 0x02
		break;
 27c:	08 95       	ret
		case OUTPUT:
		SET_BIT  (Chip_port->DDR ,pin_num);
 27e:	21 81       	ldd	r18, Z+1	; 0x01
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <GPIO_Pin_Configuration+0x64>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <GPIO_Pin_Configuration+0x60>
 290:	ba 01       	movw	r22, r20
 292:	82 2f       	mov	r24, r18
 294:	84 2b       	or	r24, r20
 296:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 298:	82 81       	ldd	r24, Z+2	; 0x02
 29a:	60 95       	com	r22
 29c:	68 23       	and	r22, r24
 29e:	62 83       	std	Z+2, r22	; 0x02
 2a0:	08 95       	ret

000002a2 <GPIO_Pin_Write>:
 	}

}
void GPIO_Pin_Write(GPIO_Register *Chip_port,GPIO_pin_number pin_num,Digital_pinState Pin_state)
{
	 switch(Pin_state)
 2a2:	44 23       	and	r20, r20
 2a4:	89 f0       	breq	.+34     	; 0x2c8 <GPIO_Pin_Write+0x26>
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	f1 f4       	brne	.+60     	; 0x2e6 <GPIO_Pin_Write+0x44>
	 {
		case HIGH:
		SET_BIT(Chip_port->PORT,pin_num);
 2aa:	fc 01       	movw	r30, r24
 2ac:	42 81       	ldd	r20, Z+2	; 0x02
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <GPIO_Pin_Write+0x18>
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <GPIO_Pin_Write+0x14>
 2be:	bf 01       	movw	r22, r30
 2c0:	64 2b       	or	r22, r20
 2c2:	fc 01       	movw	r30, r24
 2c4:	62 83       	std	Z+2, r22	; 0x02
		break;
 2c6:	08 95       	ret
		case LOW:
		CLEAR_BIT(Chip_port->PORT,pin_num);
 2c8:	fc 01       	movw	r30, r24
 2ca:	42 81       	ldd	r20, Z+2	; 0x02
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <GPIO_Pin_Write+0x36>
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <GPIO_Pin_Write+0x32>
 2dc:	bf 01       	movw	r22, r30
 2de:	60 95       	com	r22
 2e0:	64 23       	and	r22, r20
 2e2:	fc 01       	movw	r30, r24
 2e4:	62 83       	std	Z+2, r22	; 0x02
 2e6:	08 95       	ret

000002e8 <GPIO_Port_Configuration>:
	/* We Must Check That THe Value Of The configuration Of The Port Does Not exceed The 8 bit (0 <-> 255) */
	if (port_Value <= Max_uint8_Value && port_Value >= Min_uint8_Value)
	{
		/* The Value On The 8 bit DDR To Define Each Pin From The 8 Pins Of The Port As input Or Output */
		/* equal the port to the 0xFF to get the output */
		Chip_port->DDR = port_Value;
 2e8:	fc 01       	movw	r30, r24
 2ea:	61 83       	std	Z+1, r22	; 0x01
 2ec:	08 95       	ret

000002ee <GPIO_Write_High_Nibble>:
}


void GPIO_Write_High_Nibble(uint_8 Port_Name,uint_8 High_Nibble_value)
{
	High_Nibble_value &=0xf0;
 2ee:	60 7f       	andi	r22, 0xF0	; 240
	switch(Port_Name)
 2f0:	82 34       	cpi	r24, 0x42	; 66
 2f2:	79 f0       	breq	.+30     	; 0x312 <GPIO_Write_High_Nibble+0x24>
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <GPIO_Write_High_Nibble+0xe>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	31 f0       	breq	.+12     	; 0x306 <GPIO_Write_High_Nibble+0x18>
 2fa:	08 95       	ret
 2fc:	83 34       	cpi	r24, 0x43	; 67
 2fe:	79 f0       	breq	.+30     	; 0x31e <GPIO_Write_High_Nibble+0x30>
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	99 f0       	breq	.+38     	; 0x32a <GPIO_Write_High_Nibble+0x3c>
 304:	08 95       	ret
	{
		case 'A':
		Port_A->PORT &=0x0f;
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	8b bb       	out	0x1b, r24	; 27
		Port_A->PORT |=High_Nibble_value;
 30c:	8b b3       	in	r24, 0x1b	; 27
 30e:	86 2b       	or	r24, r22
 310:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		Port_B->PORT &=0x0f;
 312:	88 b3       	in	r24, 0x18	; 24
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	88 bb       	out	0x18, r24	; 24
		Port_B->PORT |=High_Nibble_value;
 318:	88 b3       	in	r24, 0x18	; 24
 31a:	86 2b       	or	r24, r22
 31c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		Port_C->PORT &=0x0f;
 31e:	85 b3       	in	r24, 0x15	; 21
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	85 bb       	out	0x15, r24	; 21
		Port_C->PORT |=High_Nibble_value;
 324:	85 b3       	in	r24, 0x15	; 21
 326:	86 2b       	or	r24, r22
 328:	85 bb       	out	0x15, r24	; 21
		case 'D':
		Port_D->PORT &=0x0f;
 32a:	82 b3       	in	r24, 0x12	; 18
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	82 bb       	out	0x12, r24	; 18
		Port_D->PORT |=High_Nibble_value;
 330:	82 b3       	in	r24, 0x12	; 18
 332:	68 2b       	or	r22, r24
 334:	62 bb       	out	0x12, r22	; 18
 336:	08 95       	ret

00000338 <__vector_1>:
void (* EXT_INT1_ISR) (void) =  NULL;
void (* EXT_INT2_ISR) (void) =  NULL;
void (* ADC_INT_ISR)  (void) =  NULL;

ISR (INT0_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	if (EXT_INT0_ISR != NULL)  // there is code in the function 
 35a:	e0 91 66 00 	lds	r30, 0x0066
 35e:	f0 91 67 00 	lds	r31, 0x0067
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_1+0x30>
	{
		EXT_INT0_ISR();
 366:	09 95       	icall
	}
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_2>:

ISR (INT1_vect,ISR_NAKED)
{
	if (EXT_INT1_ISR != NULL)
 38a:	e0 91 64 00 	lds	r30, 0x0064
 38e:	f0 91 65 00 	lds	r31, 0x0065
 392:	30 97       	sbiw	r30, 0x00	; 0
 394:	09 f0       	breq	.+2      	; 0x398 <__vector_3>
	{
		EXT_INT1_ISR();
 396:	09 95       	icall

00000398 <__vector_3>:
	}
}

ISR (INT2_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	if (EXT_INT2_ISR != NULL)
 3ba:	e0 91 62 00 	lds	r30, 0x0062
 3be:	f0 91 63 00 	lds	r31, 0x0063
 3c2:	30 97       	sbiw	r30, 0x00	; 0
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__vector_3+0x30>
	{
		EXT_INT2_ISR();
 3c6:	09 95       	icall
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_16>:
ISR (ADC_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	if (ADC_INT_ISR != NULL)
 40c:	e0 91 60 00 	lds	r30, 0x0060
 410:	f0 91 61 00 	lds	r31, 0x0061
 414:	30 97       	sbiw	r30, 0x00	; 0
 416:	09 f0       	breq	.+2      	; 0x41a <__vector_16+0x30>
	{
		ADC_INT_ISR();
 418:	09 95       	icall
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_13>:
		CP_USART_UDRE_User_ptr =USART_UDRE_User_ptr;
	}
}

ISR (USART_RXC_vect)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	if ( CP_USART_RXC_Complete_User_ptr != NULL)
 45e:	e0 91 78 00 	lds	r30, 0x0078
 462:	f0 91 79 00 	lds	r31, 0x0079
 466:	30 97       	sbiw	r30, 0x00	; 0
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_13+0x30>
	{
		CP_USART_RXC_Complete_User_ptr();
 46a:	09 95       	icall
	}			 
}			 
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_15>:
ISR (USART_TXC_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	if ( CP_USART_TXC_Complete_User_ptr != NULL)
 4b0:	e0 91 76 00 	lds	r30, 0x0076
 4b4:	f0 91 77 00 	lds	r31, 0x0077
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_15+0x30>
	{
		CP_USART_TXC_Complete_User_ptr();	
 4bc:	09 95       	icall
	}		 
}	
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_14>:
ISR (USART_UDRE_vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	if ( CP_USART_UDRE_User_ptr != NULL)
 502:	e0 91 74 00 	lds	r30, 0x0074
 506:	f0 91 75 00 	lds	r31, 0x0075
 50a:	30 97       	sbiw	r30, 0x00	; 0
 50c:	09 f0       	breq	.+2      	; 0x510 <__vector_14+0x30>
	{
		CP_USART_UDRE_User_ptr();
 50e:	09 95       	icall
	}	 
}		
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <USART_Init>:
USART_Configuration USART0={0};



void USART_Init(void)
{
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
	uint_8 UCSRC_Temp=0;
	float_32 UBBR_Temp=0.0;
	switch (USART0.Micro_State)
 538:	80 91 68 00 	lds	r24, 0x0068
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	31 f0       	breq	.+12     	; 0x54c <USART_Init+0x1a>
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	31 f0       	breq	.+12     	; 0x550 <USART_Init+0x1e>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	31 f0       	breq	.+12     	; 0x554 <USART_Init+0x22>


void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	05 c0       	rjmp	.+10     	; 0x556 <USART_Init+0x24>
		SET_BIT(UCSRB_Temp,RXEN);
		CLEAR_BIT(UCSRB_Temp,TXEN);
		break;
		case USART_Transmitter:
		CLEAR_BIT(UCSRB_Temp,RXEN);
		SET_BIT(UCSRB_Temp,TXEN);
 54c:	c8 e0       	ldi	r28, 0x08	; 8
		break;
 54e:	03 c0       	rjmp	.+6      	; 0x556 <USART_Init+0x24>
		case USART_Receiver_Transmitter:
		SET_BIT(UCSRB_Temp,RXEN);
		SET_BIT(UCSRB_Temp,TXEN);
 550:	c8 e1       	ldi	r28, 0x18	; 24
		break; 
 552:	01 c0       	rjmp	.+2      	; 0x556 <USART_Init+0x24>
		CLEAR_BIT(UCSRB_Temp,RXEN);
		CLEAR_BIT(UCSRB_Temp,TXEN);
		break;
		case USART_Receiver:
		SET_BIT(UCSRB_Temp,RXEN);
		CLEAR_BIT(UCSRB_Temp,TXEN);
 554:	c0 e1       	ldi	r28, 0x10	; 16
		SET_BIT(UCSRB_Temp,TXEN);
		break; 
		default:
		break;
	}
	switch(USART0.Communcation_Mode)
 556:	80 91 69 00 	lds	r24, 0x0069
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	31 f1       	breq	.+76     	; 0x5aa <USART_Init+0x78>
 55e:	20 f0       	brcs	.+8      	; 0x568 <USART_Init+0x36>
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	09 f4       	brne	.+2      	; 0x566 <USART_Init+0x34>
 564:	43 c0       	rjmp	.+134    	; 0x5ec <USART_Init+0xba>
 566:	65 c0       	rjmp	.+202    	; 0x632 <USART_Init+0x100>
	{
		case USART_Asyn_Normal:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		CLEAR_BIT(UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(16.0*USART0.Baud_Rate) - 0.5;
 568:	60 91 6f 00 	lds	r22, 0x006F
 56c:	70 91 70 00 	lds	r23, 0x0070
 570:	80 91 71 00 	lds	r24, 0x0071
 574:	90 91 72 00 	lds	r25, 0x0072
 578:	0e 94 b9 04 	call	0x972	; 0x972 <__floatunsisf>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e8       	ldi	r20, 0x80	; 128
 582:	51 e4       	ldi	r21, 0x41	; 65
 584:	0e 94 47 05 	call	0xa8e	; 0xa8e <__mulsf3>
 588:	9b 01       	movw	r18, r22
 58a:	ac 01       	movw	r20, r24
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	74 e2       	ldi	r23, 0x24	; 36
 590:	84 ef       	ldi	r24, 0xF4	; 244
 592:	9a e4       	ldi	r25, 0x4A	; 74
 594:	0e 94 25 04 	call	0x84a	; 0x84a <__divsf3>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	5f e3       	ldi	r21, 0x3F	; 63
 5a0:	0e 94 c0 03 	call	0x780	; 0x780 <__subsf3>
	switch(USART0.Communcation_Mode)
	{
		case USART_Asyn_Normal:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		CLEAR_BIT(UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
 5a4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	switch(USART0.Communcation_Mode)
	{
		case USART_Asyn_Normal:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		CLEAR_BIT(UCSRA_Temp,U2X);
 5a6:	10 e0       	ldi	r17, 0x00	; 0
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(16.0*USART0.Baud_Rate) - 0.5;
		break;
 5a8:	4c c0       	rjmp	.+152    	; 0x642 <USART_Init+0x110>
		case USART_Asyn_DoupleSpeed:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		SET_BIT  (UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(8.0*USART0.Baud_Rate) - 0.5;
 5aa:	60 91 6f 00 	lds	r22, 0x006F
 5ae:	70 91 70 00 	lds	r23, 0x0070
 5b2:	80 91 71 00 	lds	r24, 0x0071
 5b6:	90 91 72 00 	lds	r25, 0x0072
 5ba:	0e 94 b9 04 	call	0x972	; 0x972 <__floatunsisf>
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	51 e4       	ldi	r21, 0x41	; 65
 5c6:	0e 94 47 05 	call	0xa8e	; 0xa8e <__mulsf3>
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	74 e2       	ldi	r23, 0x24	; 36
 5d2:	84 ef       	ldi	r24, 0xF4	; 244
 5d4:	9a e4       	ldi	r25, 0x4A	; 74
 5d6:	0e 94 25 04 	call	0x84a	; 0x84a <__divsf3>
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	5f e3       	ldi	r21, 0x3F	; 63
 5e2:	0e 94 c0 03 	call	0x780	; 0x780 <__subsf3>
		UBBR_Temp = ((float_32)F_CPU)/(16.0*USART0.Baud_Rate) - 0.5;
		break;
		case USART_Asyn_DoupleSpeed:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		SET_BIT  (UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(16.0*USART0.Baud_Rate) - 0.5;
		break;
		case USART_Asyn_DoupleSpeed:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		SET_BIT  (UCSRA_Temp,U2X);
 5e8:	12 e0       	ldi	r17, 0x02	; 2
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(8.0*USART0.Baud_Rate) - 0.5;
		break;
 5ea:	2b c0       	rjmp	.+86     	; 0x642 <USART_Init+0x110>
		case USART_Sync_Master:
		SET_BIT  (UCSRC_Temp,UMSEL);
		CLEAR_BIT(UCSRA_Temp,U2X);
		UBBR_Temp = ((float_32)F_CPU)/(2.0*USART0.Baud_Rate) - 0.5;
 5ec:	60 91 6f 00 	lds	r22, 0x006F
 5f0:	70 91 70 00 	lds	r23, 0x0070
 5f4:	80 91 71 00 	lds	r24, 0x0071
 5f8:	90 91 72 00 	lds	r25, 0x0072
 5fc:	0e 94 b9 04 	call	0x972	; 0x972 <__floatunsisf>
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	0e 94 c1 03 	call	0x782	; 0x782 <__addsf3>
 608:	9b 01       	movw	r18, r22
 60a:	ac 01       	movw	r20, r24
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	74 e2       	ldi	r23, 0x24	; 36
 610:	84 ef       	ldi	r24, 0xF4	; 244
 612:	9a e4       	ldi	r25, 0x4A	; 74
 614:	0e 94 25 04 	call	0x84a	; 0x84a <__divsf3>
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	5f e3       	ldi	r21, 0x3F	; 63
 620:	0e 94 c0 03 	call	0x780	; 0x780 <__subsf3>
		switch(USART0.Clock_Parity)
 624:	20 91 6e 00 	lds	r18, 0x006E
 628:	21 30       	cpi	r18, 0x01	; 1
 62a:	49 f0       	breq	.+18     	; 0x63e <USART_Init+0x10c>
		SET_BIT  (UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(8.0*USART0.Baud_Rate) - 0.5;
		break;
		case USART_Sync_Master:
		SET_BIT  (UCSRC_Temp,UMSEL);
 62c:	d0 e4       	ldi	r29, 0x40	; 64
		CLEAR_BIT(UCSRA_Temp,U2X);
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	08 c0       	rjmp	.+16     	; 0x642 <USART_Init+0x110>
void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
	uint_8 UCSRC_Temp=0;
	float_32 UBBR_Temp=0.0;
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	cb 01       	movw	r24, r22

void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
	uint_8 UCSRC_Temp=0;
 638:	d0 e0       	ldi	r29, 0x00	; 0



void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
 63a:	10 e0       	ldi	r17, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <USART_Init+0x110>
		{
			case USART_SamplingOnFaling:
			CLEAR_BIT(UCSRC_Temp,UCPOL);
			break;
			case USART_SamplingOnRising:
			SET_BIT(UCSRC_Temp,UCPOL);
 63e:	d1 e4       	ldi	r29, 0x41	; 65
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(8.0*USART0.Baud_Rate) - 0.5;
		break;
		case USART_Sync_Master:
		SET_BIT  (UCSRC_Temp,UMSEL);
		CLEAR_BIT(UCSRA_Temp,U2X);
 640:	10 e0       	ldi	r17, 0x00	; 0
		
		break;
		default:
		break;
	}
	switch(USART0.Communication_Processor)
 642:	20 91 6a 00 	lds	r18, 0x006A
 646:	22 23       	and	r18, r18
 648:	19 f0       	breq	.+6      	; 0x650 <USART_Init+0x11e>
 64a:	21 30       	cpi	r18, 0x01	; 1
 64c:	19 f0       	breq	.+6      	; 0x654 <USART_Init+0x122>
 64e:	03 c0       	rjmp	.+6      	; 0x656 <USART_Init+0x124>
	{
		case USART_SingleProcessor:
		CLEAR_BIT(UCSRA_Temp,MPCM);
 650:	1e 7f       	andi	r17, 0xFE	; 254
		break;
 652:	01 c0       	rjmp	.+2      	; 0x656 <USART_Init+0x124>
		case USART_MultiProcessor:
		SET_BIT(UCSRA_Temp,MPCM);
 654:	11 60       	ori	r17, 0x01	; 1
		break;
		default:
		break;
	}
	switch(USART0.Interrupt_Source)
 656:	20 91 6b 00 	lds	r18, 0x006B
 65a:	23 30       	cpi	r18, 0x03	; 3
 65c:	89 f0       	breq	.+34     	; 0x680 <USART_Init+0x14e>
 65e:	28 f4       	brcc	.+10     	; 0x66a <USART_Init+0x138>
 660:	21 30       	cpi	r18, 0x01	; 1
 662:	51 f0       	breq	.+20     	; 0x678 <USART_Init+0x146>
 664:	22 30       	cpi	r18, 0x02	; 2
 666:	51 f0       	breq	.+20     	; 0x67c <USART_Init+0x14a>
 668:	12 c0       	rjmp	.+36     	; 0x68e <USART_Init+0x15c>
 66a:	26 30       	cpi	r18, 0x06	; 6
 66c:	69 f0       	breq	.+26     	; 0x688 <USART_Init+0x156>
 66e:	27 30       	cpi	r18, 0x07	; 7
 670:	69 f0       	breq	.+26     	; 0x68c <USART_Init+0x15a>
 672:	25 30       	cpi	r18, 0x05	; 5
 674:	61 f4       	brne	.+24     	; 0x68e <USART_Init+0x15c>
 676:	06 c0       	rjmp	.+12     	; 0x684 <USART_Init+0x152>
	{
		SET_BIT(SREG,I_Bit);
		case USART_Interrupt_Disable:
		break;
		case USART_RxComplete_Enable:
		SET_BIT(UCSRB_Temp,RXCIE);
 678:	c0 68       	ori	r28, 0x80	; 128
		break;
 67a:	09 c0       	rjmp	.+18     	; 0x68e <USART_Init+0x15c>
		case USART_TxComplete_Enable:
		SET_BIT(UCSRB_Temp,TXCIE);
 67c:	c0 64       	ori	r28, 0x40	; 64
		break;
 67e:	07 c0       	rjmp	.+14     	; 0x68e <USART_Init+0x15c>
		case USART_UDR_Enable:
		SET_BIT(UCSRB_Temp,UDRIE);
 680:	c0 62       	ori	r28, 0x20	; 32
		break;
 682:	05 c0       	rjmp	.+10     	; 0x68e <USART_Init+0x15c>
		case USART_RX_Complete_UDR_Enable:
		SET_BIT(UCSRB_Temp,RXCIE);
		SET_BIT(UCSRB_Temp,UDRIE);
 684:	c0 6a       	ori	r28, 0xA0	; 160
		break;
 686:	03 c0       	rjmp	.+6      	; 0x68e <USART_Init+0x15c>
		case USART_Tx_Complete_UDR_Enable:
		SET_BIT(UCSRB_Temp,TXCIE);
		SET_BIT(UCSRB_Temp,UDRIE);
 688:	c0 66       	ori	r28, 0x60	; 96
		break;
 68a:	01 c0       	rjmp	.+2      	; 0x68e <USART_Init+0x15c>
		case USART_All_Interrupt_Enable:
		SET_BIT(UCSRB_Temp,RXCIE);
		SET_BIT(UCSRB_Temp,TXCIE);
		SET_BIT(UCSRB_Temp,UDRIE);
 68c:	c0 6e       	ori	r28, 0xE0	; 224
		break;
		default:
		break;
	}
	switch(USART0.Character_Size)
 68e:	20 91 6c 00 	lds	r18, 0x006C
 692:	22 30       	cpi	r18, 0x02	; 2
 694:	91 f0       	breq	.+36     	; 0x6ba <USART_Init+0x188>
 696:	28 f4       	brcc	.+10     	; 0x6a2 <USART_Init+0x170>
 698:	22 23       	and	r18, r18
 69a:	41 f0       	breq	.+16     	; 0x6ac <USART_Init+0x17a>
 69c:	21 30       	cpi	r18, 0x01	; 1
 69e:	49 f0       	breq	.+18     	; 0x6b2 <USART_Init+0x180>
 6a0:	15 c0       	rjmp	.+42     	; 0x6cc <USART_Init+0x19a>
 6a2:	23 30       	cpi	r18, 0x03	; 3
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <USART_Init+0x190>
 6a6:	24 30       	cpi	r18, 0x04	; 4
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <USART_Init+0x196>
 6aa:	10 c0       	rjmp	.+32     	; 0x6cc <USART_Init+0x19a>
	{
		case Size_5bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
 6ac:	cb 7f       	andi	r28, 0xFB	; 251
		CLEAR_BIT(UCSRC_Temp,UCSZ1);
		CLEAR_BIT(UCSRC_Temp,UCSZ0);
 6ae:	d9 7f       	andi	r29, 0xF9	; 249
		break;
 6b0:	0d c0       	rjmp	.+26     	; 0x6cc <USART_Init+0x19a>
		case Size_6bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
 6b2:	cb 7f       	andi	r28, 0xFB	; 251
		CLEAR_BIT(UCSRC_Temp,UCSZ1);
 6b4:	db 7f       	andi	r29, 0xFB	; 251
		SET_BIT  (UCSRC_Temp,UCSZ0);
 6b6:	d2 60       	ori	r29, 0x02	; 2
		break;
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <USART_Init+0x19a>
		case Size_7bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
 6ba:	cb 7f       	andi	r28, 0xFB	; 251
		SET_BIT  (UCSRC_Temp,UCSZ1);
		CLEAR_BIT(UCSRC_Temp,UCSZ0);
 6bc:	dd 7f       	andi	r29, 0xFD	; 253
 6be:	d4 60       	ori	r29, 0x04	; 4
		break;
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <USART_Init+0x19a>
		case Size_8bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
 6c2:	cb 7f       	andi	r28, 0xFB	; 251
		SET_BIT  (UCSRC_Temp,UCSZ1);
		SET_BIT  (UCSRC_Temp,UCSZ0);
 6c4:	d6 60       	ori	r29, 0x06	; 6
		break;
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <USART_Init+0x19a>
		case Size_9bit:
		SET_BIT  (UCSRB_Temp,UCSZ2);
 6c8:	c4 60       	ori	r28, 0x04	; 4
		SET_BIT  (UCSRC_Temp,UCSZ1);
		SET_BIT  (UCSRC_Temp,UCSZ0);
 6ca:	d6 60       	ori	r29, 0x06	; 6
		break;
		default:
		break;
		
	}
	switch(USART0.Frame_Control)
 6cc:	20 91 6d 00 	lds	r18, 0x006D
 6d0:	22 30       	cpi	r18, 0x02	; 2
 6d2:	89 f0       	breq	.+34     	; 0x6f6 <USART_Init+0x1c4>
 6d4:	28 f4       	brcc	.+10     	; 0x6e0 <USART_Init+0x1ae>
 6d6:	22 23       	and	r18, r18
 6d8:	49 f0       	breq	.+18     	; 0x6ec <USART_Init+0x1ba>
 6da:	21 30       	cpi	r18, 0x01	; 1
 6dc:	49 f0       	breq	.+18     	; 0x6f0 <USART_Init+0x1be>
 6de:	15 c0       	rjmp	.+42     	; 0x70a <USART_Init+0x1d8>
 6e0:	24 30       	cpi	r18, 0x04	; 4
 6e2:	79 f0       	breq	.+30     	; 0x702 <USART_Init+0x1d0>
 6e4:	58 f0       	brcs	.+22     	; 0x6fc <USART_Init+0x1ca>
 6e6:	25 30       	cpi	r18, 0x05	; 5
 6e8:	79 f0       	breq	.+30     	; 0x708 <USART_Init+0x1d6>
 6ea:	0f c0       	rjmp	.+30     	; 0x70a <USART_Init+0x1d8>
	{
		case USART_Parity_Disable_1StopBit:
		CLEAR_BIT(UCSRC_Temp,UPM1);
		CLEAR_BIT(UCSRC_Temp,UPM0);
		CLEAR_BIT(UCSRC_Temp,USBS);
 6ec:	d7 7c       	andi	r29, 0xC7	; 199
		break;
 6ee:	0d c0       	rjmp	.+26     	; 0x70a <USART_Init+0x1d8>
		case USART_Parity_Disable_2StopBit:
		CLEAR_BIT(UCSRC_Temp,UPM1);
		CLEAR_BIT(UCSRC_Temp,UPM0);
 6f0:	df 7c       	andi	r29, 0xCF	; 207
		SET_BIT(UCSRC_Temp,USBS);
 6f2:	d8 60       	ori	r29, 0x08	; 8
		break;
 6f4:	0a c0       	rjmp	.+20     	; 0x70a <USART_Init+0x1d8>
		case USART_Parity_Even_1StopBit:
		SET_BIT(UCSRC_Temp,UPM1);
		CLEAR_BIT(UCSRC_Temp,UPM0);
		CLEAR_BIT(UCSRC_Temp,USBS);
 6f6:	d7 7e       	andi	r29, 0xE7	; 231
 6f8:	d0 62       	ori	r29, 0x20	; 32
		break;
 6fa:	07 c0       	rjmp	.+14     	; 0x70a <USART_Init+0x1d8>
		case USART_Parity_Even_2StopBit:
		SET_BIT(UCSRC_Temp,UPM1);
		CLEAR_BIT(UCSRC_Temp,UPM0);
 6fc:	df 7e       	andi	r29, 0xEF	; 239
		SET_BIT(UCSRC_Temp,USBS);
 6fe:	d8 62       	ori	r29, 0x28	; 40
		break;
 700:	04 c0       	rjmp	.+8      	; 0x70a <USART_Init+0x1d8>
		case USART_Parity_Odd_1StopBit:
		SET_BIT(UCSRC_Temp,UPM1);
		SET_BIT(UCSRC_Temp,UPM0);
		CLEAR_BIT(UCSRC_Temp,USBS);
 702:	d7 7f       	andi	r29, 0xF7	; 247
 704:	d0 63       	ori	r29, 0x30	; 48
		break;
 706:	01 c0       	rjmp	.+2      	; 0x70a <USART_Init+0x1d8>
		case USART_Parity_Odd_2StopBit:
		SET_BIT(UCSRC_Temp,UPM1);
		SET_BIT(UCSRC_Temp,UPM0);
		SET_BIT(UCSRC_Temp,USBS);
 708:	d8 63       	ori	r29, 0x38	; 56
		break;
		default:
		break;
	}
	UBRRH = ((uint_16)UBBR_Temp)>>8;//shift right to get the most bits of UBBR
 70a:	0e 94 8d 04 	call	0x91a	; 0x91a <__fixunssfsi>
 70e:	70 bd       	out	0x20, r23	; 32
	UBRRL = ((uint_16)UBBR_Temp);
 710:	69 b9       	out	0x09, r22	; 9
	UCSRA =UCSRA_Temp;
 712:	1b b9       	out	0x0b, r17	; 11
	UCSRC =UCSRC_Temp;
 714:	d0 bd       	out	0x20, r29	; 32
	UCSRB =UCSRB_Temp;//put in the last because on it the enable bit of the UART
 716:	ca b9       	out	0x0a, r28	; 10
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	08 95       	ret

00000720 <USART_Receive_ByteOfData_Blocking>:
}

uint_16 USART_Receive_ByteOfData_Blocking()
{
	uint_16 Recived_Data = 0;
	while (READ_BIT(UCSRA,RXC)==0);
 720:	5f 9b       	sbis	0x0b, 7	; 11
 722:	fe cf       	rjmp	.-4      	; 0x720 <USART_Receive_ByteOfData_Blocking>
	if(READ_BIT(UCSRA,FE)| READ_BIT(UCSRA,DOR) | READ_BIT(UCSRA,PE))
 724:	7b b1       	in	r23, 0x0b	; 11
 726:	eb b1       	in	r30, 0x0b	; 11
 728:	6b b1       	in	r22, 0x0b	; 11
 72a:	e3 fb       	bst	r30, 3
 72c:	44 27       	eor	r20, r20
 72e:	40 f9       	bld	r20, 0
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	74 fb       	bst	r23, 4
 734:	22 27       	eor	r18, r18
 736:	20 f9       	bld	r18, 0
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	24 2b       	or	r18, r20
 73c:	35 2b       	or	r19, r21
 73e:	62 fb       	bst	r22, 2
 740:	88 27       	eor	r24, r24
 742:	80 f9       	bld	r24, 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	82 2b       	or	r24, r18
 748:	93 2b       	or	r25, r19
 74a:	89 2b       	or	r24, r25
 74c:	89 f0       	breq	.+34     	; 0x770 <USART_Receive_ByteOfData_Blocking+0x50>
	{
		//there is error in data received,please handle this error
		if(READ_BIT(UCSRA,FE))
 74e:	5c 9b       	sbis	0x0b, 4	; 11
 750:	04 c0       	rjmp	.+8      	; 0x75a <USART_Receive_ByteOfData_Blocking+0x3a>
		{
			USART0.Error_Type = USART_FrameError;
 752:	83 e0       	ldi	r24, 0x03	; 3
 754:	80 93 73 00 	sts	0x0073, r24
 758:	0b c0       	rjmp	.+22     	; 0x770 <USART_Receive_ByteOfData_Blocking+0x50>
		}
		else if (READ_BIT(UCSRA,DOR))
 75a:	5b 9b       	sbis	0x0b, 3	; 11
 75c:	04 c0       	rjmp	.+8      	; 0x766 <USART_Receive_ByteOfData_Blocking+0x46>
		{
			USART0.Error_Type = USART_DataOverRunError;
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	80 93 73 00 	sts	0x0073, r24
 764:	05 c0       	rjmp	.+10     	; 0x770 <USART_Receive_ByteOfData_Blocking+0x50>
		}
		else if (READ_BIT(UCSRA,PE))
 766:	5a 9b       	sbis	0x0b, 2	; 11
 768:	03 c0       	rjmp	.+6      	; 0x770 <USART_Receive_ByteOfData_Blocking+0x50>
		{
			USART0.Error_Type = USART_ParityError;	
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	80 93 73 00 	sts	0x0073, r24
		}
	}
	if(USART0.Character_Size == Size_9bit)
 770:	80 91 6c 00 	lds	r24, 0x006C
 774:	84 30       	cpi	r24, 0x04	; 4
 776:	09 f4       	brne	.+2      	; 0x77a <USART_Receive_ByteOfData_Blocking+0x5a>
	{
		Recived_Data = UCSRB & (1<<RXB8) >>7;
 778:	8a b1       	in	r24, 0x0a	; 10
	}
	Recived_Data |=UDR;
 77a:	8c b1       	in	r24, 0x0c	; 12
	return Recived_Data; 
	
}
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	08 95       	ret

00000780 <__subsf3>:
 780:	50 58       	subi	r21, 0x80	; 128

00000782 <__addsf3>:
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	0e d0       	rcall	.+28     	; 0x7a4 <__addsf3x>
 788:	48 c1       	rjmp	.+656    	; 0xa1a <__fp_round>
 78a:	39 d1       	rcall	.+626    	; 0x9fe <__fp_pscA>
 78c:	30 f0       	brcs	.+12     	; 0x79a <__addsf3+0x18>
 78e:	3e d1       	rcall	.+636    	; 0xa0c <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3+0x18>
 792:	31 f4       	brne	.+12     	; 0x7a0 <__addsf3+0x1e>
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	11 f4       	brne	.+4      	; 0x79c <__addsf3+0x1a>
 798:	1e f4       	brtc	.+6      	; 0x7a0 <__addsf3+0x1e>
 79a:	2e c1       	rjmp	.+604    	; 0x9f8 <__fp_nan>
 79c:	0e f4       	brtc	.+2      	; 0x7a0 <__addsf3+0x1e>
 79e:	e0 95       	com	r30
 7a0:	e7 fb       	bst	r30, 7
 7a2:	24 c1       	rjmp	.+584    	; 0x9ec <__fp_inf>

000007a4 <__addsf3x>:
 7a4:	e9 2f       	mov	r30, r25
 7a6:	4a d1       	rcall	.+660    	; 0xa3c <__fp_split3>
 7a8:	80 f3       	brcs	.-32     	; 0x78a <__addsf3+0x8>
 7aa:	ba 17       	cp	r27, r26
 7ac:	62 07       	cpc	r22, r18
 7ae:	73 07       	cpc	r23, r19
 7b0:	84 07       	cpc	r24, r20
 7b2:	95 07       	cpc	r25, r21
 7b4:	18 f0       	brcs	.+6      	; 0x7bc <__addsf3x+0x18>
 7b6:	71 f4       	brne	.+28     	; 0x7d4 <__addsf3x+0x30>
 7b8:	9e f5       	brtc	.+102    	; 0x820 <__addsf3x+0x7c>
 7ba:	62 c1       	rjmp	.+708    	; 0xa80 <__fp_zero>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3x+0x1c>
 7be:	e0 95       	com	r30
 7c0:	0b 2e       	mov	r0, r27
 7c2:	ba 2f       	mov	r27, r26
 7c4:	a0 2d       	mov	r26, r0
 7c6:	0b 01       	movw	r0, r22
 7c8:	b9 01       	movw	r22, r18
 7ca:	90 01       	movw	r18, r0
 7cc:	0c 01       	movw	r0, r24
 7ce:	ca 01       	movw	r24, r20
 7d0:	a0 01       	movw	r20, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	ff 27       	eor	r31, r31
 7d6:	59 1b       	sub	r21, r25
 7d8:	99 f0       	breq	.+38     	; 0x800 <__addsf3x+0x5c>
 7da:	59 3f       	cpi	r21, 0xF9	; 249
 7dc:	50 f4       	brcc	.+20     	; 0x7f2 <__addsf3x+0x4e>
 7de:	50 3e       	cpi	r21, 0xE0	; 224
 7e0:	68 f1       	brcs	.+90     	; 0x83c <__addsf3x+0x98>
 7e2:	1a 16       	cp	r1, r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	a2 2f       	mov	r26, r18
 7e8:	23 2f       	mov	r18, r19
 7ea:	34 2f       	mov	r19, r20
 7ec:	44 27       	eor	r20, r20
 7ee:	58 5f       	subi	r21, 0xF8	; 248
 7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <__addsf3x+0x34>
 7f2:	46 95       	lsr	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	a7 95       	ror	r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	53 95       	inc	r21
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__addsf3x+0x4e>
 800:	7e f4       	brtc	.+30     	; 0x820 <__addsf3x+0x7c>
 802:	1f 16       	cp	r1, r31
 804:	ba 0b       	sbc	r27, r26
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	ba f0       	brmi	.+46     	; 0x83c <__addsf3x+0x98>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	a1 f0       	breq	.+40     	; 0x83a <__addsf3x+0x96>
 812:	ff 0f       	add	r31, r31
 814:	bb 1f       	adc	r27, r27
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	c2 f7       	brpl	.-16     	; 0x80e <__addsf3x+0x6a>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <__addsf3x+0x98>
 820:	ba 0f       	add	r27, r26
 822:	62 1f       	adc	r22, r18
 824:	73 1f       	adc	r23, r19
 826:	84 1f       	adc	r24, r20
 828:	48 f4       	brcc	.+18     	; 0x83c <__addsf3x+0x98>
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	08 f0       	brcs	.+2      	; 0x83a <__addsf3x+0x96>
 838:	b3 cf       	rjmp	.-154    	; 0x7a0 <__addsf3+0x1e>
 83a:	93 95       	inc	r25
 83c:	88 0f       	add	r24, r24
 83e:	08 f0       	brcs	.+2      	; 0x842 <__addsf3x+0x9e>
 840:	99 27       	eor	r25, r25
 842:	ee 0f       	add	r30, r30
 844:	97 95       	ror	r25
 846:	87 95       	ror	r24
 848:	08 95       	ret

0000084a <__divsf3>:
 84a:	0c d0       	rcall	.+24     	; 0x864 <__divsf3x>
 84c:	e6 c0       	rjmp	.+460    	; 0xa1a <__fp_round>
 84e:	de d0       	rcall	.+444    	; 0xa0c <__fp_pscB>
 850:	40 f0       	brcs	.+16     	; 0x862 <__stack+0x3>
 852:	d5 d0       	rcall	.+426    	; 0x9fe <__fp_pscA>
 854:	30 f0       	brcs	.+12     	; 0x862 <__stack+0x3>
 856:	21 f4       	brne	.+8      	; 0x860 <__stack+0x1>
 858:	5f 3f       	cpi	r21, 0xFF	; 255
 85a:	19 f0       	breq	.+6      	; 0x862 <__stack+0x3>
 85c:	c7 c0       	rjmp	.+398    	; 0x9ec <__fp_inf>
 85e:	51 11       	cpse	r21, r1
 860:	10 c1       	rjmp	.+544    	; 0xa82 <__fp_szero>
 862:	ca c0       	rjmp	.+404    	; 0x9f8 <__fp_nan>

00000864 <__divsf3x>:
 864:	eb d0       	rcall	.+470    	; 0xa3c <__fp_split3>
 866:	98 f3       	brcs	.-26     	; 0x84e <__divsf3+0x4>

00000868 <__divsf3_pse>:
 868:	99 23       	and	r25, r25
 86a:	c9 f3       	breq	.-14     	; 0x85e <__divsf3+0x14>
 86c:	55 23       	and	r21, r21
 86e:	b1 f3       	breq	.-20     	; 0x85c <__divsf3+0x12>
 870:	95 1b       	sub	r25, r21
 872:	55 0b       	sbc	r21, r21
 874:	bb 27       	eor	r27, r27
 876:	aa 27       	eor	r26, r26
 878:	62 17       	cp	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	38 f0       	brcs	.+14     	; 0x88e <__divsf3_pse+0x26>
 880:	9f 5f       	subi	r25, 0xFF	; 255
 882:	5f 4f       	sbci	r21, 0xFF	; 255
 884:	22 0f       	add	r18, r18
 886:	33 1f       	adc	r19, r19
 888:	44 1f       	adc	r20, r20
 88a:	aa 1f       	adc	r26, r26
 88c:	a9 f3       	breq	.-22     	; 0x878 <__divsf3_pse+0x10>
 88e:	33 d0       	rcall	.+102    	; 0x8f6 <__divsf3_pse+0x8e>
 890:	0e 2e       	mov	r0, r30
 892:	3a f0       	brmi	.+14     	; 0x8a2 <__divsf3_pse+0x3a>
 894:	e0 e8       	ldi	r30, 0x80	; 128
 896:	30 d0       	rcall	.+96     	; 0x8f8 <__divsf3_pse+0x90>
 898:	91 50       	subi	r25, 0x01	; 1
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	e6 95       	lsr	r30
 89e:	00 1c       	adc	r0, r0
 8a0:	ca f7       	brpl	.-14     	; 0x894 <__divsf3_pse+0x2c>
 8a2:	29 d0       	rcall	.+82     	; 0x8f6 <__divsf3_pse+0x8e>
 8a4:	fe 2f       	mov	r31, r30
 8a6:	27 d0       	rcall	.+78     	; 0x8f6 <__divsf3_pse+0x8e>
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	bb 1f       	adc	r27, r27
 8b0:	26 17       	cp	r18, r22
 8b2:	37 07       	cpc	r19, r23
 8b4:	48 07       	cpc	r20, r24
 8b6:	ab 07       	cpc	r26, r27
 8b8:	b0 e8       	ldi	r27, 0x80	; 128
 8ba:	09 f0       	breq	.+2      	; 0x8be <__divsf3_pse+0x56>
 8bc:	bb 0b       	sbc	r27, r27
 8be:	80 2d       	mov	r24, r0
 8c0:	bf 01       	movw	r22, r30
 8c2:	ff 27       	eor	r31, r31
 8c4:	93 58       	subi	r25, 0x83	; 131
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	2a f0       	brmi	.+10     	; 0x8d4 <__divsf3_pse+0x6c>
 8ca:	9e 3f       	cpi	r25, 0xFE	; 254
 8cc:	51 05       	cpc	r21, r1
 8ce:	68 f0       	brcs	.+26     	; 0x8ea <__divsf3_pse+0x82>
 8d0:	8d c0       	rjmp	.+282    	; 0x9ec <__fp_inf>
 8d2:	d7 c0       	rjmp	.+430    	; 0xa82 <__fp_szero>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	ec f3       	brlt	.-6      	; 0x8d2 <__divsf3_pse+0x6a>
 8d8:	98 3e       	cpi	r25, 0xE8	; 232
 8da:	dc f3       	brlt	.-10     	; 0x8d2 <__divsf3_pse+0x6a>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	9f 5f       	subi	r25, 0xFF	; 255
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__divsf3_pse+0x74>
 8ea:	88 0f       	add	r24, r24
 8ec:	91 1d       	adc	r25, r1
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret
 8f6:	e1 e0       	ldi	r30, 0x01	; 1
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	bb 1f       	adc	r27, r27
 900:	62 17       	cp	r22, r18
 902:	73 07       	cpc	r23, r19
 904:	84 07       	cpc	r24, r20
 906:	ba 07       	cpc	r27, r26
 908:	20 f0       	brcs	.+8      	; 0x912 <__divsf3_pse+0xaa>
 90a:	62 1b       	sub	r22, r18
 90c:	73 0b       	sbc	r23, r19
 90e:	84 0b       	sbc	r24, r20
 910:	ba 0b       	sbc	r27, r26
 912:	ee 1f       	adc	r30, r30
 914:	88 f7       	brcc	.-30     	; 0x8f8 <__divsf3_pse+0x90>
 916:	e0 95       	com	r30
 918:	08 95       	ret

0000091a <__fixunssfsi>:
 91a:	98 d0       	rcall	.+304    	; 0xa4c <__fp_splitA>
 91c:	88 f0       	brcs	.+34     	; 0x940 <__fixunssfsi+0x26>
 91e:	9f 57       	subi	r25, 0x7F	; 127
 920:	90 f0       	brcs	.+36     	; 0x946 <__fixunssfsi+0x2c>
 922:	b9 2f       	mov	r27, r25
 924:	99 27       	eor	r25, r25
 926:	b7 51       	subi	r27, 0x17	; 23
 928:	a0 f0       	brcs	.+40     	; 0x952 <__fixunssfsi+0x38>
 92a:	d1 f0       	breq	.+52     	; 0x960 <__fixunssfsi+0x46>
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	1a f0       	brmi	.+6      	; 0x93c <__fixunssfsi+0x22>
 936:	ba 95       	dec	r27
 938:	c9 f7       	brne	.-14     	; 0x92c <__fixunssfsi+0x12>
 93a:	12 c0       	rjmp	.+36     	; 0x960 <__fixunssfsi+0x46>
 93c:	b1 30       	cpi	r27, 0x01	; 1
 93e:	81 f0       	breq	.+32     	; 0x960 <__fixunssfsi+0x46>
 940:	9f d0       	rcall	.+318    	; 0xa80 <__fp_zero>
 942:	b1 e0       	ldi	r27, 0x01	; 1
 944:	08 95       	ret
 946:	9c c0       	rjmp	.+312    	; 0xa80 <__fp_zero>
 948:	67 2f       	mov	r22, r23
 94a:	78 2f       	mov	r23, r24
 94c:	88 27       	eor	r24, r24
 94e:	b8 5f       	subi	r27, 0xF8	; 248
 950:	39 f0       	breq	.+14     	; 0x960 <__fixunssfsi+0x46>
 952:	b9 3f       	cpi	r27, 0xF9	; 249
 954:	cc f3       	brlt	.-14     	; 0x948 <__fixunssfsi+0x2e>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b3 95       	inc	r27
 95e:	d9 f7       	brne	.-10     	; 0x956 <__fixunssfsi+0x3c>
 960:	3e f4       	brtc	.+14     	; 0x970 <__fixunssfsi+0x56>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	08 95       	ret

00000972 <__floatunsisf>:
 972:	e8 94       	clt
 974:	09 c0       	rjmp	.+18     	; 0x988 <__floatsisf+0x12>

00000976 <__floatsisf>:
 976:	97 fb       	bst	r25, 7
 978:	3e f4       	brtc	.+14     	; 0x988 <__floatsisf+0x12>
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	99 23       	and	r25, r25
 98a:	a9 f0       	breq	.+42     	; 0x9b6 <__floatsisf+0x40>
 98c:	f9 2f       	mov	r31, r25
 98e:	96 e9       	ldi	r25, 0x96	; 150
 990:	bb 27       	eor	r27, r27
 992:	93 95       	inc	r25
 994:	f6 95       	lsr	r31
 996:	87 95       	ror	r24
 998:	77 95       	ror	r23
 99a:	67 95       	ror	r22
 99c:	b7 95       	ror	r27
 99e:	f1 11       	cpse	r31, r1
 9a0:	f8 cf       	rjmp	.-16     	; 0x992 <__floatsisf+0x1c>
 9a2:	fa f4       	brpl	.+62     	; 0x9e2 <__floatsisf+0x6c>
 9a4:	bb 0f       	add	r27, r27
 9a6:	11 f4       	brne	.+4      	; 0x9ac <__floatsisf+0x36>
 9a8:	60 ff       	sbrs	r22, 0
 9aa:	1b c0       	rjmp	.+54     	; 0x9e2 <__floatsisf+0x6c>
 9ac:	6f 5f       	subi	r22, 0xFF	; 255
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	16 c0       	rjmp	.+44     	; 0x9e2 <__floatsisf+0x6c>
 9b6:	88 23       	and	r24, r24
 9b8:	11 f0       	breq	.+4      	; 0x9be <__floatsisf+0x48>
 9ba:	96 e9       	ldi	r25, 0x96	; 150
 9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <__floatsisf+0x6a>
 9be:	77 23       	and	r23, r23
 9c0:	21 f0       	breq	.+8      	; 0x9ca <__floatsisf+0x54>
 9c2:	9e e8       	ldi	r25, 0x8E	; 142
 9c4:	87 2f       	mov	r24, r23
 9c6:	76 2f       	mov	r23, r22
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__floatsisf+0x5e>
 9ca:	66 23       	and	r22, r22
 9cc:	71 f0       	breq	.+28     	; 0x9ea <__floatsisf+0x74>
 9ce:	96 e8       	ldi	r25, 0x86	; 134
 9d0:	86 2f       	mov	r24, r22
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	2a f0       	brmi	.+10     	; 0x9e2 <__floatsisf+0x6c>
 9d8:	9a 95       	dec	r25
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	da f7       	brpl	.-10     	; 0x9d8 <__floatsisf+0x62>
 9e2:	88 0f       	add	r24, r24
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__fp_inf>:
 9ec:	97 f9       	bld	r25, 7
 9ee:	9f 67       	ori	r25, 0x7F	; 127
 9f0:	80 e8       	ldi	r24, 0x80	; 128
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	08 95       	ret

000009f8 <__fp_nan>:
 9f8:	9f ef       	ldi	r25, 0xFF	; 255
 9fa:	80 ec       	ldi	r24, 0xC0	; 192
 9fc:	08 95       	ret

000009fe <__fp_pscA>:
 9fe:	00 24       	eor	r0, r0
 a00:	0a 94       	dec	r0
 a02:	16 16       	cp	r1, r22
 a04:	17 06       	cpc	r1, r23
 a06:	18 06       	cpc	r1, r24
 a08:	09 06       	cpc	r0, r25
 a0a:	08 95       	ret

00000a0c <__fp_pscB>:
 a0c:	00 24       	eor	r0, r0
 a0e:	0a 94       	dec	r0
 a10:	12 16       	cp	r1, r18
 a12:	13 06       	cpc	r1, r19
 a14:	14 06       	cpc	r1, r20
 a16:	05 06       	cpc	r0, r21
 a18:	08 95       	ret

00000a1a <__fp_round>:
 a1a:	09 2e       	mov	r0, r25
 a1c:	03 94       	inc	r0
 a1e:	00 0c       	add	r0, r0
 a20:	11 f4       	brne	.+4      	; 0xa26 <__fp_round+0xc>
 a22:	88 23       	and	r24, r24
 a24:	52 f0       	brmi	.+20     	; 0xa3a <__fp_round+0x20>
 a26:	bb 0f       	add	r27, r27
 a28:	40 f4       	brcc	.+16     	; 0xa3a <__fp_round+0x20>
 a2a:	bf 2b       	or	r27, r31
 a2c:	11 f4       	brne	.+4      	; 0xa32 <__fp_round+0x18>
 a2e:	60 ff       	sbrs	r22, 0
 a30:	04 c0       	rjmp	.+8      	; 0xa3a <__fp_round+0x20>
 a32:	6f 5f       	subi	r22, 0xFF	; 255
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	08 95       	ret

00000a3c <__fp_split3>:
 a3c:	57 fd       	sbrc	r21, 7
 a3e:	90 58       	subi	r25, 0x80	; 128
 a40:	44 0f       	add	r20, r20
 a42:	55 1f       	adc	r21, r21
 a44:	59 f0       	breq	.+22     	; 0xa5c <__fp_splitA+0x10>
 a46:	5f 3f       	cpi	r21, 0xFF	; 255
 a48:	71 f0       	breq	.+28     	; 0xa66 <__fp_splitA+0x1a>
 a4a:	47 95       	ror	r20

00000a4c <__fp_splitA>:
 a4c:	88 0f       	add	r24, r24
 a4e:	97 fb       	bst	r25, 7
 a50:	99 1f       	adc	r25, r25
 a52:	61 f0       	breq	.+24     	; 0xa6c <__fp_splitA+0x20>
 a54:	9f 3f       	cpi	r25, 0xFF	; 255
 a56:	79 f0       	breq	.+30     	; 0xa76 <__fp_splitA+0x2a>
 a58:	87 95       	ror	r24
 a5a:	08 95       	ret
 a5c:	12 16       	cp	r1, r18
 a5e:	13 06       	cpc	r1, r19
 a60:	14 06       	cpc	r1, r20
 a62:	55 1f       	adc	r21, r21
 a64:	f2 cf       	rjmp	.-28     	; 0xa4a <__fp_split3+0xe>
 a66:	46 95       	lsr	r20
 a68:	f1 df       	rcall	.-30     	; 0xa4c <__fp_splitA>
 a6a:	08 c0       	rjmp	.+16     	; 0xa7c <__fp_splitA+0x30>
 a6c:	16 16       	cp	r1, r22
 a6e:	17 06       	cpc	r1, r23
 a70:	18 06       	cpc	r1, r24
 a72:	99 1f       	adc	r25, r25
 a74:	f1 cf       	rjmp	.-30     	; 0xa58 <__fp_splitA+0xc>
 a76:	86 95       	lsr	r24
 a78:	71 05       	cpc	r23, r1
 a7a:	61 05       	cpc	r22, r1
 a7c:	08 94       	sec
 a7e:	08 95       	ret

00000a80 <__fp_zero>:
 a80:	e8 94       	clt

00000a82 <__fp_szero>:
 a82:	bb 27       	eor	r27, r27
 a84:	66 27       	eor	r22, r22
 a86:	77 27       	eor	r23, r23
 a88:	cb 01       	movw	r24, r22
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__mulsf3>:
 a8e:	0b d0       	rcall	.+22     	; 0xaa6 <__mulsf3x>
 a90:	c4 cf       	rjmp	.-120    	; 0xa1a <__fp_round>
 a92:	b5 df       	rcall	.-150    	; 0x9fe <__fp_pscA>
 a94:	28 f0       	brcs	.+10     	; 0xaa0 <__mulsf3+0x12>
 a96:	ba df       	rcall	.-140    	; 0xa0c <__fp_pscB>
 a98:	18 f0       	brcs	.+6      	; 0xaa0 <__mulsf3+0x12>
 a9a:	95 23       	and	r25, r21
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__mulsf3+0x12>
 a9e:	a6 cf       	rjmp	.-180    	; 0x9ec <__fp_inf>
 aa0:	ab cf       	rjmp	.-170    	; 0x9f8 <__fp_nan>
 aa2:	11 24       	eor	r1, r1
 aa4:	ee cf       	rjmp	.-36     	; 0xa82 <__fp_szero>

00000aa6 <__mulsf3x>:
 aa6:	ca df       	rcall	.-108    	; 0xa3c <__fp_split3>
 aa8:	a0 f3       	brcs	.-24     	; 0xa92 <__mulsf3+0x4>

00000aaa <__mulsf3_pse>:
 aaa:	95 9f       	mul	r25, r21
 aac:	d1 f3       	breq	.-12     	; 0xaa2 <__mulsf3+0x14>
 aae:	95 0f       	add	r25, r21
 ab0:	50 e0       	ldi	r21, 0x00	; 0
 ab2:	55 1f       	adc	r21, r21
 ab4:	62 9f       	mul	r22, r18
 ab6:	f0 01       	movw	r30, r0
 ab8:	72 9f       	mul	r23, r18
 aba:	bb 27       	eor	r27, r27
 abc:	f0 0d       	add	r31, r0
 abe:	b1 1d       	adc	r27, r1
 ac0:	63 9f       	mul	r22, r19
 ac2:	aa 27       	eor	r26, r26
 ac4:	f0 0d       	add	r31, r0
 ac6:	b1 1d       	adc	r27, r1
 ac8:	aa 1f       	adc	r26, r26
 aca:	64 9f       	mul	r22, r20
 acc:	66 27       	eor	r22, r22
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	66 1f       	adc	r22, r22
 ad4:	82 9f       	mul	r24, r18
 ad6:	22 27       	eor	r18, r18
 ad8:	b0 0d       	add	r27, r0
 ada:	a1 1d       	adc	r26, r1
 adc:	62 1f       	adc	r22, r18
 ade:	73 9f       	mul	r23, r19
 ae0:	b0 0d       	add	r27, r0
 ae2:	a1 1d       	adc	r26, r1
 ae4:	62 1f       	adc	r22, r18
 ae6:	83 9f       	mul	r24, r19
 ae8:	a0 0d       	add	r26, r0
 aea:	61 1d       	adc	r22, r1
 aec:	22 1f       	adc	r18, r18
 aee:	74 9f       	mul	r23, r20
 af0:	33 27       	eor	r19, r19
 af2:	a0 0d       	add	r26, r0
 af4:	61 1d       	adc	r22, r1
 af6:	23 1f       	adc	r18, r19
 af8:	84 9f       	mul	r24, r20
 afa:	60 0d       	add	r22, r0
 afc:	21 1d       	adc	r18, r1
 afe:	82 2f       	mov	r24, r18
 b00:	76 2f       	mov	r23, r22
 b02:	6a 2f       	mov	r22, r26
 b04:	11 24       	eor	r1, r1
 b06:	9f 57       	subi	r25, 0x7F	; 127
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	8a f0       	brmi	.+34     	; 0xb2e <__mulsf3_pse+0x84>
 b0c:	e1 f0       	breq	.+56     	; 0xb46 <__mulsf3_pse+0x9c>
 b0e:	88 23       	and	r24, r24
 b10:	4a f0       	brmi	.+18     	; 0xb24 <__mulsf3_pse+0x7a>
 b12:	ee 0f       	add	r30, r30
 b14:	ff 1f       	adc	r31, r31
 b16:	bb 1f       	adc	r27, r27
 b18:	66 1f       	adc	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	91 50       	subi	r25, 0x01	; 1
 b20:	50 40       	sbci	r21, 0x00	; 0
 b22:	a9 f7       	brne	.-22     	; 0xb0e <__mulsf3_pse+0x64>
 b24:	9e 3f       	cpi	r25, 0xFE	; 254
 b26:	51 05       	cpc	r21, r1
 b28:	70 f0       	brcs	.+28     	; 0xb46 <__mulsf3_pse+0x9c>
 b2a:	60 cf       	rjmp	.-320    	; 0x9ec <__fp_inf>
 b2c:	aa cf       	rjmp	.-172    	; 0xa82 <__fp_szero>
 b2e:	5f 3f       	cpi	r21, 0xFF	; 255
 b30:	ec f3       	brlt	.-6      	; 0xb2c <__mulsf3_pse+0x82>
 b32:	98 3e       	cpi	r25, 0xE8	; 232
 b34:	dc f3       	brlt	.-10     	; 0xb2c <__mulsf3_pse+0x82>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b7 95       	ror	r27
 b3e:	f7 95       	ror	r31
 b40:	e7 95       	ror	r30
 b42:	9f 5f       	subi	r25, 0xFF	; 255
 b44:	c1 f7       	brne	.-16     	; 0xb36 <__mulsf3_pse+0x8c>
 b46:	fe 2b       	or	r31, r30
 b48:	88 0f       	add	r24, r24
 b4a:	91 1d       	adc	r25, r1
 b4c:	96 95       	lsr	r25
 b4e:	87 95       	ror	r24
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret

00000b54 <_exit>:
 b54:	f8 94       	cli

00000b56 <__stop_program>:
 b56:	ff cf       	rjmp	.-2      	; 0xb56 <__stop_program>
